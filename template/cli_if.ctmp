// Copyright (c) 2022 Ziga Miklosic
// All Rights Reserved
// This software is under MIT licence (https://opensource.org/licenses/MIT)
////////////////////////////////////////////////////////////////////////////////
/**
*@file      cli_if.c
*@brief     Interface with Command Line Interface
*@author    Ziga Miklosic
*@date      11.09.2022
*@version   V0.0.1
*/
////////////////////////////////////////////////////////////////////////////////
/*!
* @addtogroup CLI_IF
* @{ <!-- BEGIN GROUP -->
*/
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Includes
////////////////////////////////////////////////////////////////////////////////
#include "cli_if.h"

// USER CODE BEGIN...

#include "drivers/peripheral/usart/uart_dbg.h"

// USER CODE END...

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
// Variables
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
// Function prototypes
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
// Functions
////////////////////////////////////////////////////////////////////////////////

cli_status_t cli_if_init(void)
{
	cli_status_t status = eCLI_OK;

	// USER CODE BEGIN...

	if ( eUART_DBG_OK != uart_dbg_init())
	{
		status = eCLI_ERROR_INIT;
	}

	// USER CODE END...

	return status;
}


cli_status_t cli_if_deinit(void)
{
	cli_status_t status = eCLI_OK;

	// USER CODE BEGIN...


	// USER CODE END...

	return status;
}


cli_status_t cli_if_receive(uint8_t * const p_data)
{
	cli_status_t status = eCLI_OK;

	// USER CODE BEGIN...

	if ( eUART_DBG_OK != uart_dbg_get((char*) p_data))
	{
		status = eCLI_ERROR;
	}

	// USER CODE END...

	return status;
}


cli_status_t cli_if_transmit(const uint8_t * const p_data)
{
	cli_status_t status = eCLI_OK;

	// USER CODE BEGIN...

	if ( eUART_DBG_OK != uart_dbg_write((const char*) p_data))
	{
		status = eCLI_ERROR;
	}

	// USER CODE END...

	return status;
}

////////////////////////////////////////////////////////////////////////////////
/**
*		Acquire mutex
*
* @note	User shall provide definition of that function based on used platform!
*
*		If not being used leave empty.
*
*		This function does not have an affect if "CLI_CFG_MUTEX_EN"
* 		is set to 0.
*
* @return 		status - Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
cli_status_t cli_if_aquire_mutex(void)
{
	cli_status_t status = eCLI_OK;

	// USER CODE BEGIN...


	// USER CODE END...

	return status;
}

////////////////////////////////////////////////////////////////////////////////
/**
*		Release mutex
*
* @note	User shall provide definition of that function based on used platform!
*
*		If not being used leave empty.
*
*		This function does not have an affect if "CLI_CFG_MUTEX_EN"
* 		is set to 0.
*
* @return 		status - Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
cli_status_t cli_if_release_mutex(void)
{
	cli_status_t status = eCLI_OK;

	// USER CODE BEGIN...


	// USER CODE END...

	return status;
}



////////////////////////////////////////////////////////////////////////////////
/**
* @} <!-- END GROUP -->
*/
////////////////////////////////////////////////////////////////////////////////
