// Copyright (c) 2025 Ziga Miklosic
// All Rights Reserved
// This software is under MIT licence (https://opensource.org/licenses/MIT)
////////////////////////////////////////////////////////////////////////////////
/**
*@file      cli_if.c
*@brief     Interface with Command Line Interface
*@author    Ziga Miklosic
*@email     ziga.miklosic@gmail.com
*@date      08.05.2025
*@version   V2.2.0
*/
////////////////////////////////////////////////////////////////////////////////
/*!
* @addtogroup CLI_IF
* @{ <!-- BEGIN GROUP -->
*
*
* 	@note	Change code only between "USER_CODE_BEGIN" and
* 			"USER_CODE_END" section!
*/
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Includes
////////////////////////////////////////////////////////////////////////////////
#include "cli_if.h"
#include "cli_cfg.h"

// USER CODE BEGIN...

#include <string.h>

// RTOS
#include <cmsis_os2.h>

// Communication driver
#include "drivers/peripheral/uart/uart/src/uart.h"

// For reset
#include "stm32g4xx_hal.h"

// USER CODE END...

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////

// USER CODE BEGIN..

/**
 *      CLI mutex timeout
 *
 *  Unit: ms
 */
#define CLI_IF_MUTEX_TIMEOUT_MS                 ( 10U )

// USER CODE END...

////////////////////////////////////////////////////////////////////////////////
// Variables
////////////////////////////////////////////////////////////////////////////////

// USER CODE BEGIN...

/**
 *  CLI OS mutex
 */
static osMutexId_t  g_cli_mutex_id = NULL;
const osMutexAttr_t g_cli_mutex_attr =
{
    .name       = "cli",
    .attr_bits  = ( osMutexPrioInherit | osMutexRecursive ),
};

// USER CODE END...

////////////////////////////////////////////////////////////////////////////////
// Function prototypes
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Functions
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
/**
*		Initialize Command Line Interface communication port
*
* @return 		status 	- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
cli_status_t cli_if_init(void)
{
	cli_status_t status = eCLI_OK;

	// USER CODE BEGIN...

	if ( eUART_OK != uart_init( eUART_DBG ))
	{
		status = eCLI_ERROR_INIT;
	}
	else
	{
        // Create mutex
        g_cli_mutex_id = osMutexNew( &g_cli_mutex_attr );

        if ( NULL == g_cli_mutex_id )
        {
            status = eCLI_ERROR;
        }
	}

	// USER CODE END...

	return status;
}

////////////////////////////////////////////////////////////////////////////////
/**
*		De-initialize Command Line Interface communication port
*
* @return 		status 	- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
cli_status_t cli_if_deinit(void)
{
	cli_status_t status = eCLI_OK;

	// USER CODE BEGIN...

	// USER CODE END...

	return status;
}

////////////////////////////////////////////////////////////////////////////////
/**
*		Receive data
*
* @param[out]	p_data	- Pointer to received data
* @return 		status 	- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
cli_status_t cli_if_receive(uint8_t * const p_data)
{
	cli_status_t status = eCLI_OK;

	// USER CODE BEGIN...

	if ( eUART_OK != uart_receive_it( eUART_DBG, (uint8_t*) p_data))
	{
		status = eCLI_ERROR;
	}

	// USER CODE END...

	return status;
}

////////////////////////////////////////////////////////////////////////////////
/**
*		Transmit data
*
* @param[in]	p_data	- Pointer to transmit data
* @return 		status 	- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
cli_status_t cli_if_transmit(const uint8_t * const p_data)
{
	cli_status_t status = eCLI_OK;

	// USER CODE BEGIN...

    // Calculate size of string
    const uint32_t str_size = strlen((const char*) p_data );

    /**
     *  Try to transmit many times in case transmission buffer is full
     *
     *  NOTE:   In case of "par_print" command there may be a lot of information
     *          to send over to PC and tx buffer might get full. Therefore it is
     *          mandatory to wait to get empty enough to fill it with new message!
     */
    uint32_t now = HAL_GetTick();

    while ( eUART_WAR_FULL == uart_transmit_it( eUART_DBG, (const uint8_t*) p_data, str_size ))
    {
        // Check for timeout
        if ((uint32_t) ( HAL_GetTick() - now ) >= 100U )
        {
            status = eCLI_ERROR;
            break;
        }

        // This task needs a break as it waits for UART Hw to pump out data -> scheduler should go to next task...
        osDelay(2);
    }

	// USER CODE END...

	return status;
}

////////////////////////////////////////////////////////////////////////////////
/**
*		Acquire mutex
*
* @note	User shall provide definition of that function based on used platform!
*
*		If not being used leave empty.
*
* @return 		status - Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
cli_status_t cli_if_aquire_mutex(void)
{
	cli_status_t status = eCLI_OK;

	// USER CODE BEGIN...

    if ( osOK == osMutexAcquire( g_cli_mutex_id, CLI_IF_MUTEX_TIMEOUT_MS ))
    {
        // No action
    }
    else
    {
        status = eCLI_ERROR;
    }

	// USER CODE END...

	return status;
}

////////////////////////////////////////////////////////////////////////////////
/**
*		Release mutex
*
* @note	User shall provide definition of that function based on used platform!
*
*		If not being used leave empty.
*
* @return 		status - Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
cli_status_t cli_if_release_mutex(void)
{
	cli_status_t status = eCLI_OK;

	// USER CODE BEGIN...

	osMutexRelease( g_cli_mutex_id );

	// USER CODE END...

	return status;
}

////////////////////////////////////////////////////////////////////////////////
/**
*		Reset device
*
* @note	User shall provide definition of that function based on used platform!
*
*		If not being used leave empty.
*
* @return 		status - Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
cli_status_t cli_if_device_reset(void)
{
	cli_status_t status = eCLI_OK;

	// USER CODE BEGIN...

	// Reset device
	NVIC_SystemReset();

	// USER CODE END...

	return status;
}

////////////////////////////////////////////////////////////////////////////////
/**
*		Check if specified RAM address range is valid and can be accessed
*
* @param[in]    addr   - RAM address
* @param[in]    size   - Range size [byte]
* @return 		status - Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
cli_status_t cli_if_check_ram_addr_range(const uint32_t addr, const uint32_t size)
{
    UNUSED(addr);
    UNUSED(size);

	// No support for RAM access for now
    return eCLI_ERROR;
}

////////////////////////////////////////////////////////////////////////////////
/**
*		Get device uptime [ms]
*
* @return 		Uptime [ms]
*/
////////////////////////////////////////////////////////////////////////////////
uint64_t cli_if_get_uptime(void)
{
    return sys_get_uptime_ms();
}

////////////////////////////////////////////////////////////////////////////////
/**
* @} <!-- END GROUP -->
*/
////////////////////////////////////////////////////////////////////////////////
