// Copyright (c) 2023 Ziga Miklosic
// All Rights Reserved
// This software is under MIT licence (https://opensource.org/licenses/MIT)
////////////////////////////////////////////////////////////////////////////////
/**
*@file      cli_cfg.h
*@brief     Command Line Interface Configurations
*@author    Ziga Miklosic
*@email     ziga.miklosic@gmail.com
*@date      17.02.2023
*@version   V1.3.0
*/
////////////////////////////////////////////////////////////////////////////////
/**
*@addtogroup CLI_CFG
* @{ <!-- BEGIN GROUP -->
*
* 	@note	Change code only between "USER_CODE_BEGIN" and
* 			"USER_CODE_END" section!
*
*/
////////////////////////////////////////////////////////////////////////////////

#ifndef __CLI_CFG_H
#define __CLI_CFG_H

////////////////////////////////////////////////////////////////////////////////
// Includes
////////////////////////////////////////////////////////////////////////////////
#include <stdint.h>
#include <stdbool.h>

// USER CODE BEGIN...

#include "config/proj_cfg.h"

#include "revision/revision/src/version.h"

// USER CODE END...

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////

// USER CODE BEGIN...

/**
 * 	Enable/Disable intro string
 *
 * 	@brief	Intro string will be transmitted at "cli_init()" function call,
 * 			if low level com driver are initialized OK.
 */
#define CLI_CFG_INTRO_STRING_EN					( 1 )

#if ( 1 == CLI_CFG_INTRO_STRING_EN )

	/**
	 * 	Intro strings
	 */
	#define CLI_CFG_INTRO_PROJECT_NAME			((const char*) "ECS Bootloader" )
	#define CLI_CFG_INTRO_SW_VER				((const char*) version_get_sw_str())
	#define CLI_CFG_INTRO_HW_VER				((const char*) version_get_hw_str())
	#define CLI_CFG_INTRO_PROJ_INFO				((const char*) version_get_proj_info_str())
#endif

/**
 * 	Termination string
 *
 * 	@note	Each "cli_printf" will have termination string appended to
 * 			its back.
 *
 * 			If not used leave empty. E.g. ""
 */
#define CLI_CFG_TERMINATION_STRING				((const char*) ( "\r\n" ))

/**
 * 	Transmission buffer size in bytes
 */
#define CLI_CFG_TX_BUF_SIZE						( 1024 )

/**
 * 	Reception buffer size in bytes
 */
#define CLI_CFG_RX_BUF_SIZE						( 512 )

/**
 * 	Maximum number of commands within a single table
 *
 * @note	Space for table command is allocated statically in compile time therefore
 * 			take special care defining that number. It is recommended to set
 * 			to a minimum as needed.
 *
 * 	@note 	Size of single table will increase with CLI_CFG_MAX_NUM_OF_COMMANDS
 * 			macro by following formula:
 *
 * 			size_of_cmd_table = ( 12 * CLI_CFG_MAX_NUM_OF_COMMANDS ) [bytes]
 */
#define CLI_CFG_MAX_NUM_OF_COMMANDS				( 10 )

/**
 * 	Maximum number of user defined command tables
 *
 * @note	Space for table command is allocated statically in compile time therefore
 * 			take special care defining that number. It is recommended to set
 * 			to a minimum as needed.
 *
 * 	@note 	Total size of all command table  will increase with CLI_CFG_MAX_NUM_OF_COMMANDS
 * 			and CLI_CFG_MAX_NUM_OF_USER_TABLES macro by following formula:
 *
 * 			tatal_size_of_all_cmd_tables = ( CLI_CFG_MAX_NUM_OF_USER_TABLES * (( 12 * CLI_CFG_MAX_NUM_OF_COMMANDS [bytes] ) + 4 )) [bytes]
 *
 * 	@note
 */
#define CLI_CFG_MAX_NUM_OF_USER_TABLES			( 8 )

/**
 * 	Enable/Disable multiple access protection
 */
#define CLI_CFG_MUTEX_EN						( 0 )

/**
 * 	Enable/Disable parameters usage
 *
 * 	@note	When enabled Device Parameters must be part of the project!
 * 			Link to repository: https://github.com/GeneralEmbeddedCLibraries/parameters
 */
#define CLI_CFG_PAR_USE_EN						( 0 )

#if ( 1 == CLI_CFG_PAR_USE_EN )

	/**
	 *    	Time period of "cli_hndl()" function call
	 *
	 *    @note		Used for parameter streaming purposes!
	 *
	 *    Unit: ms
	 */
	#define CLI_CFG_HNDL_PERIOD_MS          	( 10UL )

	/**
	 *    	Default streaming period
     *
     *    @note     Must be in "CLI_CFG_HNDL_PERIOD_MS" resolution!
	 *
	 *    Unit: ms
	 */
	#define CLI_CFG_DEF_STREAM_PER_MS          	( 100UL )

	/**
	 *      Maxumum number of parameters in streaming list
	 */
	#define CLI_CFG_PAR_MAX_IN_LIVE_WATCH       ( 32 )

    /**
     *      Enable/Disable storing streaming info to NVM
     *
     *  @note   When enabled NVM module must be part of the project!
     * 			Link to repository: https://github.com/GeneralEmbeddedCLibraries/nvm
     */
     #define CLI_CFG_STREAM_NVM_EN              ( 1 )

    /**
	 *      NVM parameter region option
	 *
	 * 	@note 	User shall select region based on nvm_cfg.h region
	 * 			definitions "nvm_region_name_t"
	 */
     #define CLI_CFG_NVM_REGION                 ( eNVM_REGION_INT_FLASH_CLI )

     /**
      *     Enable/Disable automatic storage of streaming infor to NVM
      *
      * @note   When enabled streaming info is stored on following 
      *         commands execution:
      *             - status_des
      *             - status_start
      *             - status_stop
	  *				- status_rate
      */
      #define CLI_CFG_AUTO_STREAM_STORE_EN      ( 0 )

#endif

/**
 *  Enable/Disable legacy mode
 *
 * @note    Legacy mode is compatible with PC tool V0.2.0!
 */
#define CLI_CFG_LEGACY_EN                       ( 0 )

/**
 * 	Enable/Disable debug mode
 */
#define CLI_CFG_DEBUG_EN						( 1 )

/**
 * 	Enable/Disable assertions
 */
#define CLI_CFG_ASSERT_EN						( 1 )

/**
 * 	 Assertion macros
 */
#if ( 1 == CLI_CFG_ASSERT_EN )
	#define CLI_ASSERT(x)						PROJ_CFG_ASSERT(x)
#else
	#define CLI_ASSERT(x)						{ ; }
#endif

/**
 * 		List of communication channels
 *
 * @note	Warning and error communication channels must
 * 			always be present!
 *
 * 	@note	Change code only between "USER_CODE_BEGIN" and
 * 			"USER_CODE_END" section!
 */
typedef enum
{
	eCLI_CH_WAR = 0,		/**<Warning channel */
	eCLI_CH_ERR,			/**<Error channel */

	// USER_CODE_BEGIN


	// USER_CODE_END

	eCLI_CH_NUM_OF			/**<Leave unchange - Must be last! */
} cli_ch_opt_t;

// USER CODE END...

/**
 * 	CLI Communication Channels
 */
typedef struct
{
	const char * 	name;	/**<Name of channel */
	bool			en;		/**<Enable flag */
} cli_cfg_ch_data_t;

/**
 * 	Invalid module configuration catcher
 */
#if ( CLI_CFG_TX_BUF_SIZE < 32 )
	#error "CLI Transmisson buffer size must be larger than 32 bytes! Adjust <CLI_CFG_TX_BUF_SIZE> macro inside cli_cfg.h file!"
#endif

#if ( CLI_CFG_RX_BUF_SIZE < 32 )
	#error "CLI Reception buffer size must be larger than 32 bytes! Adjust <CLI_CFG_RX_BUF_SIZE> macro inside cli_cfg.h file!"
#endif

#if (( 1 == CLI_CFG_PAR_USE_EN ) && (( CLI_CFG_DEF_STREAM_PER_MS < 10 ) || (( CLI_CFG_DEF_STREAM_PER_MS % CLI_CFG_HNDL_PERIOD_MS ) != 0 )))
	#error "Invalid default streaming period! Adjust <CLI_CFG_DEF_STREAM_PER_MS> macro inside cli_cfg.h file!"
#endif

////////////////////////////////////////////////////////////////////////////////
// Functions
////////////////////////////////////////////////////////////////////////////////
const char* cli_cfg_get_ch_name	(const cli_ch_opt_t ch);
bool 		cli_cfg_get_ch_en	(const cli_ch_opt_t ch);
void 		cli_cfg_set_ch_en	(const cli_ch_opt_t ch, const bool en);

#if ( 1 == CLI_CFG_PAR_USE_EN )
	const char * cli_cfg_get_par_groupe_str(const uint32_t par_num);
#endif

#endif // __CLI_CFG_H

////////////////////////////////////////////////////////////////////////////////
/**
* @} <!-- END GROUP -->
*/
////////////////////////////////////////////////////////////////////////////////
